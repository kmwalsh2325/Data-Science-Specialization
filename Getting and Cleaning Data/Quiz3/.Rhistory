temp <- read.csv(file.path, header=TRUE)
temp <- temp[complete.cases(temp),]
nobs <- nrow(temp)
if(nobs > threshold){
correlation <- cor(temp$sulfate, temp$nitrate)
append(master.v, correlation)
}
else {}
}
master.v
threshold <- 150
master.v <- c()
for(file in list.files(directory, pattern = ".csv")){
file.path <- paste(directory, file, sep="/")
temp <- read.csv(file.path, header=TRUE)
temp <- temp[complete.cases(temp),]
nobs <- nrow(temp)
if(nobs > threshold){
correlation <- cor(temp$sulfate, temp$nitrate)
append(master.v, correlation)
}
else {}
}
master.v
directory
for(file in list.files(directory, pattern =".csv")){
print(file)
}
master.v <- c()
for(file in list.files(directory, pattern = ".csv")){
file.path <- paste(directory, file, sep="/")
temp <- read.csv(file.path, header=TRUE)
temp <- temp[complete.cases(temp),]
nobs <- nrow(temp)
print(nobs)
if(nobs > threshold){
correlation <- cor(temp$sulfate, temp$nitrate)
append(master.v, correlation)
}
else {}
}
master.v
master.v <- c()
for(file in list.files(directory, pattern = ".csv")){
file.path <- paste(directory, file, sep="/")
temp <- read.csv(file.path, header=TRUE)
temp <- temp[complete.cases(temp),]
nobs <- nrow(temp)
if(nobs > threshold){
print(nobs)
}
else {}
}
master.v
new <-c()
new
rm(new)
nobs
append(master.v, nobs)
master.v
master.v <- c()
for(file in list.files(directory, pattern = ".csv")){
file.path <- paste(directory, file, sep="/")
temp <- read.csv(file.path, header=TRUE)
temp <- temp[complete.cases(temp),]
nobs <- nrow(temp)
print(nobs)
if(nobs > threshold){
correlation <- cor(temp$sulfate, temp$nitrate)
master.v <- append(master.v, correlation)
}
else {}
}
master.v
master.v <- c()
for(file in list.files(directory, pattern = ".csv")){
file.path <- paste(directory, file, sep="/")
temp <- read.csv(file.path, header=TRUE)
temp <- temp[complete.cases(temp),]
nobs <- nrow(temp)
if(nobs > threshold){
correlation <- cor(temp$sulfate, temp$nitrate)
master.v <- append(master.v, correlation)
}
else {}
}
head(master.v)
source("corr.R")
cr <- corr(directory, 150)
head(cr)
summary(cr)
cr <- corr(directory, 1500)
head(cr)
class(cr)
new <- as.numeric(c())
class(new)
new
submit()
submit()
submit()
submit()
cr <- corr(directory, 400)
head(cr)
summary(cr)
cr <- corr(directory, 5000)
summary(cr)
length(cr)
cr <- corr(directory)
round(summary(cr), 4)
length(cr)
?round
trunc(5.2)
trunc(5.2, 2)
trunc(5.2, 3)
trunc(0.2, 3)
submit()
test <- function(x) {
for(x > 0) {
message("getting for loop")
return(3)
}
return(4)
}
test
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
test <- function(x) {
for(x > 0) {
message("getting for loop")
return(3)
}
return(4)
}
cachemean <- function(x) {
if(x > 0) {
message("getting cached data")
}
data <- x$get()
}
cachemean <- function(x) {
if(x > 0) {
message("getting cached data")
return(3)
}
return(4)
}
cachemean
x <- 5
cachemean(x)
cachemean <- function(x) {
if(x > 0) {
message("getting cached data")
return(3)
}
4
}
cachemean(x)
cachemean <- function(x) {
if(x > 0) {
message("getting cached data")
3
}
4
}
cachemean(x)
rm(cachemean)
source("R Programming/ProgrammingAssignment2/")
source("R Programming/ProgrammingAssignment2/cachematrix.R")
x <- matrix(c(1:4, 9, 2, 5, 5, 3), nrow= 3, ncol = 3)
x
makeCacheMatrix(x)
makeCacheMatrix(x)->z
cacheSolve(z)
cacheSolve(z) -> y
y %*% z
y %*% z$get()
round(.Last.value)
z$get() %*% y
source("R Programming/ProgrammingAssignment2/cachematrix.R")
makeCacheMatrix(x)->z
cacheSolve(z) -> y
z$get() %*% y
y %*% z$get()
setwd("Getting and Cleaning Data/Quiz3/")
houseData <- read.csv("getdata-data-ss06hid.csv", header = TRUE)
str(houseData)
houseData$ACR == 3
houseData$AGS == 6
agricultureLogical <- (houseData$ACR == 3 & houseData$AGS == 6)
houseData[which(agricultureLogical), ]
head(.Last.value)
rm(agricultureLogical)
rm(houseData)
GDPdata <- read.csv("getdata-data-GDP.csv")
EDUdata <- read.csv("getdata-data-EDSTATS_Country.csv")
str(GDPdata)
str(EDUdata)
names(EDUdata)
names(GDPdata)
GDPdata$X.1
GDPdata$X.2
GDPdata$X.3
GDPdata$X.4
GDPdata$X.5
GDPdata$X.6
GDPdata$X.7
GDPdata$X.8
GDPdata$X.2
names(EDUdata)
EDUdata$CountryCode
GDPdata <- read.csv("getdata-data-GDP.csv", header = TRUE)
str(GDPdata)
GDPdata$X
EDUdata$CountryCode
name(GDPdata$X)
names(GDPdata$X)
names(GDPdata)
names(GDPdata)[1]
names(GDPdata)[1] <- "CountryCode"
names(GDPdata)[1]
names(GDPdata)
GDPdata$CountryCode
mergedata <- merge(GDPdata, EDUdata, by = "CountryCode", all = TRUE)
str(mergedata)
length(mergedata$CountryCode)
mergedata <- merge(GDPdata, EDUdata, by = "CountryCode", all.x = TRUE)
length(mergedata$CountryCode)
mergedata <- merge(GDPdata, EDUdata, by = "CountryCode", all.y = TRUE)
length(mergedata$CountryCode)
mergedata <- merge(GDPdata, EDUdata, by = "CountryCode", all = FALSE)
length(mergedata$CountryCode)
mergedata <- merge(GDPdata, EDUdata, by = "CountryCode")
length(mergedata$CountryCode)
rm(mergedata)
str(EDUdata)
EDUdata$Short.Name
str(EDUdata)
names(EDUdata)
names(GDPdata)
str(GDPdata)
head(GDPdata)
head(GDPdata, 10)
tail(GDPdata, 10)
str(read.csv("getdata-data-GDP.csv", header = FALSE, skip = 4))
head(read.csv("getdata-data-GDP.csv", header = FALSE, skip = 4))
head(read.csv("getdata-data-GDP.csv", header = FALSE, skip = 5))
head(read.csv("getdata-data-GDP.csv", header = TRUE, skip = 5))
?read.csv
head(read.csv("getdata-data-GDP.csv", header = FALSE, skip = 4))
head(read.csv("getdata-data-GDP.csv", header = TRUE, skip = 4))
head(read.csv("getdata-data-GDP.csv", header = TRUE, skip = 1))
head(read.csv("getdata-data-GDP.csv", header = TRUE, skip = 2))
head(read.csv("getdata-data-GDP.csv", header = TRUE, skip = 3))
head(read.csv("getdata-data-GDP.csv", header = TRUE, skip = 0))
setwd("")
setwd("../../Desktop/")
ao <- read.csv("appleorange.csv")
str(ao)
head(ao)
aoraw <- read.csv("appleorange.csv", stringsAsFactors = FALSE, header = FALSE)
head(aoraw, 10)
length(aoraw)
dim(aoraw)
tail(aoraw, 10)
aodata <- aoraw[3:700, ]
aodata
names(aodata) <- c("country", "countrynumber", "products", "productnumber", "tonnes", "year")
aodata$countrynumber <- as.integer(aodata$countrynumber)
aoraw[, 2]
aoraw[, 2] <- as.integer(aoraw[, 2])
aoraw[, 2]
fslines <- which(aodata$country == "Food supply quantity (tonnes) (tonnes)")
aodata <- aodata[(-1 * fslines), ]
aodata
aodata$tonnes <- gsub("\xca", "", aodata$tonnes)
aodata$tonnes <- gsub(", tonnes \\(\\)", "", aodata$tonnes)
aodata
aodata$tonnes <- as.numeric(aodata$tonnes)
aodata
aodata$year <- 2009
aodata
library(reshape2)
cleanao3 <- dcast(aodata[, c(1:3,5)], formula = country + countrynumber ~ products, value.var = "tonnes")
cleanao3
aodata
str(aodata)
cleanao3
str(cleanao3)
names(cleanao3)[3:4] <- c("apples", "oranges")
str(cleanao3)
cleanao1 <- aodata[aodata$productnumber == 2617,]
cleanao1$oranges <- aodata$tonnes[aodata$productnumber == 2611]
cleanao1 <- cleanao1[,c(1,2,5,7)]
names(cleanao1)[names(cleanao1) == "tonnes"] <- "apples"
apples <- aodata[aodata$productnumber == 2617, c(1,2,5)]
names(apples)[3] <- "apples"
oranges <- aodata[aodata$productnumber == 2611, c(2,5)]
names(oranges)[2] <- "oranges"
cleanao2 <- merge(apples, oranges, by="countrynumber", all=TRUE)
cleanao2[!(complete.cases(cleanao2)),]
cleanao3[!(complete.cases(cleanao3)),]
table(aodata$country)[table(aodata$country) == 1]
cleanao3
stblraw <- read.csv("stability.csv", stringsAsFactors = FALSE, header = FALSE)
str(stblraw)
head(stblraw, 10)
tail(stblraw, 10)
sbldata <- stblraw[6:960, ]
rm(sbldata)
stbldata <- stblraw[6:960, ]
names(stbldata) <- c("country", "countrynumber", "measure", "measurecode", "score", "year")
stbldata$countrynumber <- as.integer(stbldata$countrynumber)
head(stblraw, 10)
vilines <- which(stbldata$country == "Value (index)")
stbldata <- stbldata[(-1 * vilines), ]
vklines <- which(stbldata$country == "Value (kcal/capita/day)")
stbldata <- stbldata[(-1 * vklines), ]
head(stblraw, 10)
head(stbldata, 10)
tail(stbldata, 10)
v100lines <- which(stbldata$country == "Value (per 100 square km of land area)")
stbldata <- stbldata[(-1 * v100lines), ]
head(stbldata)
stbldata$score <- gsub(", index \\(\\)", "", stbldata$score)
head(stbldata)
tail(stbldata, 10)
stbldata$score <- gsub(", per 100 square km of land area \\(\\)", "", stbldata$score)
tail(stbldata, 10)
head(stbldata, 10)
unique(stbldata$score)
stbldata$score <- gsub(", kcal/capita/day \\(\\)", "", stbldata$score)
stbldata$score <- as.numeric(stbldata$score)
stbldata$year <- 2009
stbldata$measure[stbldata$measure =="Rail-lines density (per 100 square km of land area)"] <- "railLines"
stbldata$measure[stbldata$measure =="Per capita food supply variability (kcal/capita/day)"] <- "foodVariation"
stbldata$measure[stbldata$measure =="Political stability and absence of violence/terrorism (index)"] <- "stability"
head(stbldata, 10)
cleanst3 <- dcast(stbldata[,c(1:3,5)], formula = country + countrynumber ~ measure, value_var="score")
head(cleanst3, 10)
merge(cleanao3, cleanst3, by = "countrynumber")
merge(cleanao3, cleanst3, by = "country")
merge(cleanao3, cleanst3, by = "countrynumber")
cleanao3$countrynumber %in% cleanst3$countrynumber
cleanst3$countrynumber %in% cleanao3$countrynumber
rm(EDUdata, GDPdata)
setwd("../Getting and Cleaning Data/Quiz3/")
eduraw <- read.csv("getdata-data-EDSTATS_Country.csv", headers = FALSE, stringsAsFactors = FALSE)
eduraw <- read.csv("getdata-data-EDSTATS_Country.csv", header = FALSE, stringsAsFactors = FALSE)
head(eduraw)
eduraw <- read.csv("getdata-data-EDSTATS_Country.csv", header = TRUE, stringsAsFactors = FALSE)
head(eduraw)
gdpraw <- read.csv("getdata-data-GDP.csv", header=FALSE, stringsAsFactors=FALSE)
head(gdpraw)
head(gdpraw, 10)
tail(gdpraw, 10)
tail(gdpraw, 20)
tail(gdpraw, 30)
tail(gdpraw, 300)
head(gdpraw, 10)
gdpraw <- read.csv("getdata-data-GDP.csv", header=FALSE, stringsAsFactors=FALSE, skip = 5)
head(gdpraw, 10)
names(eduraw)
names(gdpraw) <- c("CountryCode", "rank", "", "economy", "GDP (US dollars)", "", "", "", "","")
names(gdpraw)
head(gdpraw, 10)
names(gdpraw) <- c("CountryCode", "rank", "V3", "economy", "GDP (US dollars)", "V6", "V7", "V8", "V9","V10")
head(gdpraw, 10)
unique(gdpraw$V3)
unique(gdpraw$V6)
unique(gdpraw$V7)
unique(gdpraw$V8)
unique(gdpraw$V9)
unique(gdpraw$V10)
gdpraw$V3 <- NULL
head(gdpraw, 10)
gdpraw$V7 <- NULL
gdpraw$V8 <- NULL
gdpraw$V9 <- NULL
gdpraw$V10 <- NULL
head(gdpraw, 10)
tail(gdpraw, 10)
tail(gdpraw, 300)
gdpdata <- gdpraw[1:231, ]
gdpdata
gdpdata <- gdpraw[1:190, ]
gdpdata
eduraw
head(eduraw, 10)
tail(eduraw, 10)
gdpdata
head(gdpdata)
head(gdpdata, 10)
head(eduraw, 10)
tail(eduraw, 10)
unique(eduraw$Latest.population.census)
eduraw$Latest.population.census <- gsub("Register based", "", eduraw$Latest.population.census)
eduraw$Latest.population.census <- gsub("2006 (rolling)", "2006", eduraw$Latest.population.census)
unique(eduraw$Latest.population.census)
eduraw$Latest.population.census <- gsub("2006 (rolling)", "2006", eduraw$Latest.population.census)
unique(eduraw$Latest.population.census)
eduraw$Latest.population.census <- gsub("2006 \\(rolling\\)", "2006", eduraw$Latest.population.census)
unique(eduraw$Latest.population.census)
head(eduraw, 10)
eduraw$Latest.population.census <- as.numeric(eduraw$Latest.population.census)
unique(eduraw$Latest.population.census)
str(eduraw, 10)
merge(eduraw, gdpdata, by = "CountryCode", all = FALSE)
eduraw$CountryCode %in% gdpdata$CountryCode
gdpdata$CountryCode %in% eduraw$CountryCode
sum(gdpdata$CountryCode %in% eduraw$CountryCode)
merge(eduraw, gdpdata, by = "CountryCode", all = FALSE) -> mergedata
?sort
str(mergedata)
unique(mergedata$rank)
as.numeric(mergedata$rank) -> mergedata$rank
unique(mergedata$rank)
library(plyr)
arrange(mergedata, desc(rank))
head(arrange(mergedata, desc(rank)),13)
unique(mergedata$Income.Group)
gdpraw
unique(mergedata$Income.Group)
mergedata[mergedata$Income.Group == "High income: nonOECD"]
mergedata[mergedata$Income.Group == "High income: nonOECD", ]
mergedata[mergedata$Income.Group == "High income: nonOECD", rank]
mergedata[mergedata$Income.Group == "High income: nonOECD", "rank"]
mean(mergedata[mergedata$Income.Group == "High income: nonOECD", "rank"])
mean(mergedata[mergedata$Income.Group == "High income: OECD", "rank"])
?quantile
gdpdata$rank
quantile(gdpdata$rank, 5)
quantile(gdpdata$rank)
gdpdata$rank <- as.numeric(gdpdata$rank)
quantile(gdpdata$rank)
table(quantile(gdpdata$rank), eduraw$Income.Group)
quantile(mergedata$rank)
table(quantile(mergedata$rank), mergedata$Income.Group)
mergedata$Income.Group
quantile(mergedata$rank)
table( mergedata$Income.Group, quantile(mergedata$rank))
table( unique(mergedata$Income.Group), quantile(mergedata$rank))
str(mergedata)
?dcast
dcast(mergedata, rank ~ Income.Group)
dcast(mergedata, rank ~ Income.Group) -> widemerged
widemerged
quantile(widemerged)
quantile(widemerged$rank)
rm(widemerged)
quantile(mergedata$rank)
quantile(mergedata$rank)->temp
temp[1]
temp[[1]]
mergedata$rank
?jpeg
jpeg(download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "./", method="curl"), native=TRUE )
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "./", method="curl")
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "./", method="curl")
download.file("http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "./", method=curl)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "./", method="curl")
jpeg(file="getdata-jeff.jpg", native=TRUE)
jpeg(file="getdata-jeff.jpg")
jpeg(file="getdata-jeff.jpg") -> jeff
jeff
library(jpeg)
install.packages("jpeg")
library(jpeg)
jeff <- readJPEG(file = "getdata-jeff.jpg")
jeff <- readJPEG("getdata-jeff.jpg", native = TRUE)
jeff
jeff
quantile(jeff)
quantile(jeff, probs=c(0, .3, .8, 1))
rm(jeff)
mergedata
quantile(mergedata$rank, probs=c(0, .2, .4, .6, .8, 1))
table(mergedata$Income.Group)
table(mergedata$Income.Group, mergedata$rank)
table(mergedata$Income.Group, quantile(mergedata$rank))
is.list(mergedata$rank)
is.vector(mergedata$rank)
quantile(mergedata$rank)
quantile(mergedata$rank)[1]
quantile(mergedata$rank)[[1]]
quantile(mergedata$rank)[, 1]
quantile(mergedata$rank)
mergedata$rank %in% quantile(mergedata$rank)
mergedata$rank
mergedata$rank[mergedata$rank %in% quantile(mergedata$rank)]
table(mergedata$Income.Group, mergedata$rank[mergedata$rank %in% quantile(mergedata$rank)])
unique(mergedata$Income.Group)
length(mergedata$rank[mergedata$rank %in% quantile(mergedata$rank)])
table(mergedata$Income.Group, c(1,2,3,4,5))
table(na.omit(mergedata$Income.Group), c(1,2,3,4,5))
table(unique(mergedata$Income.Group), c(1,2,3,4,5))
table(mergedata$rank, mergedata$Income.Group)
quantile(mergedata$rank)
quantile(mergedata$rank, probs=c(0, .2, .4, .6, .8, 1))
table(mergedata$rank, mergedata$Income.Group) -> temp
temp[1:38, ]
temp[1:38, "Lower middle income"]
sum(temp[1:38, "Lower middle income"])
sum(temp[1:39, "Lower middle income"])
