correlation <- cor(temp$sulfate, temp$nitrate)
append(master.v, correlation)
}
else {}
}
master.v
directory
for(file in list.files(directory, pattern =".csv")){
print(file)
}
master.v <- c()
for(file in list.files(directory, pattern = ".csv")){
file.path <- paste(directory, file, sep="/")
temp <- read.csv(file.path, header=TRUE)
temp <- temp[complete.cases(temp),]
nobs <- nrow(temp)
print(nobs)
if(nobs > threshold){
correlation <- cor(temp$sulfate, temp$nitrate)
append(master.v, correlation)
}
else {}
}
master.v
master.v <- c()
for(file in list.files(directory, pattern = ".csv")){
file.path <- paste(directory, file, sep="/")
temp <- read.csv(file.path, header=TRUE)
temp <- temp[complete.cases(temp),]
nobs <- nrow(temp)
if(nobs > threshold){
print(nobs)
}
else {}
}
master.v
new <-c()
new
rm(new)
nobs
append(master.v, nobs)
master.v
master.v <- c()
for(file in list.files(directory, pattern = ".csv")){
file.path <- paste(directory, file, sep="/")
temp <- read.csv(file.path, header=TRUE)
temp <- temp[complete.cases(temp),]
nobs <- nrow(temp)
print(nobs)
if(nobs > threshold){
correlation <- cor(temp$sulfate, temp$nitrate)
master.v <- append(master.v, correlation)
}
else {}
}
master.v
master.v <- c()
for(file in list.files(directory, pattern = ".csv")){
file.path <- paste(directory, file, sep="/")
temp <- read.csv(file.path, header=TRUE)
temp <- temp[complete.cases(temp),]
nobs <- nrow(temp)
if(nobs > threshold){
correlation <- cor(temp$sulfate, temp$nitrate)
master.v <- append(master.v, correlation)
}
else {}
}
head(master.v)
source("corr.R")
cr <- corr(directory, 150)
head(cr)
summary(cr)
cr <- corr(directory, 1500)
head(cr)
class(cr)
new <- as.numeric(c())
class(new)
new
submit()
submit()
submit()
submit()
cr <- corr(directory, 400)
head(cr)
summary(cr)
cr <- corr(directory, 5000)
summary(cr)
length(cr)
cr <- corr(directory)
round(summary(cr), 4)
length(cr)
?round
trunc(5.2)
trunc(5.2, 2)
trunc(5.2, 3)
trunc(0.2, 3)
submit()
test <- function(x) {
for(x > 0) {
message("getting for loop")
return(3)
}
return(4)
}
test
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
test <- function(x) {
for(x > 0) {
message("getting for loop")
return(3)
}
return(4)
}
cachemean <- function(x) {
if(x > 0) {
message("getting cached data")
}
data <- x$get()
}
cachemean <- function(x) {
if(x > 0) {
message("getting cached data")
return(3)
}
return(4)
}
cachemean
x <- 5
cachemean(x)
cachemean <- function(x) {
if(x > 0) {
message("getting cached data")
return(3)
}
4
}
cachemean(x)
cachemean <- function(x) {
if(x > 0) {
message("getting cached data")
3
}
4
}
cachemean(x)
rm(cachemean)
source("R Programming/ProgrammingAssignment2/")
source("R Programming/ProgrammingAssignment2/cachematrix.R")
x <- matrix(c(1:4, 9, 2, 5, 5, 3), nrow= 3, ncol = 3)
x
makeCacheMatrix(x)
makeCacheMatrix(x)->z
cacheSolve(z)
cacheSolve(z) -> y
y %*% z
y %*% z$get()
round(.Last.value)
z$get() %*% y
source("R Programming/ProgrammingAssignment2/cachematrix.R")
makeCacheMatrix(x)->z
cacheSolve(z) -> y
z$get() %*% y
y %*% z$get()
backup1raw <- read.csv("Copy/bbs-analytics-supplements/file_system_testing/tests/xfs_trial1/vmware/backup_1.csv", header = TRUE, sep = " ")
backup1raw <- read.csv("Copy/bbs-analytics-supplements/file_system_testing/tests/xfs_trial1/vmware/backup_1.csv", header = TRUE, sep = ",")
?read.csv
backup1raw <- read.csv("Copy/bbs-analytics-supplements/file_system_testing/tests/xfs_trial1/vmware/backup_1.csv", header = TRUE, sep = ",", skip = 5)
str(backup1raw)
backup1raw <- read.csv("Copy/bbs-analytics-supplements/file_system_testing/tests/xfs_trial1/vmware/backup_1.csv", header = TRUE, sep = ",", skip = 5)
backup1raw <- read.csv("Copy/bbs-analytics-supplements/file_system_testing/tests/xfs_trial1/vmware/backup_1_raw.csv", header = TRUE, sep = ",", skip = 5)
str(backup1raw)
backup1raw <- read.csv("Copy/bbs-analytics-supplements/file_system_testing/tests/xfs_trial1/vmware/backup_1_raw.csv", header = TRUE, sep = ",", skip = 5, stringsAsFactors=FALSE)
str(backup1raw)
backup1raw <- read.csv("Copy/bbs-analytics-supplements/file_system_testing/tests/xfs_trial1/vmware/backup_1_raw.csv", header = TRUE, sep = ",", skip = 6, stringsAsFactors=FALSE)
str(backup1raw)
head(backup1raw, 3)
library(data.table)
backup1raw <- as.data.table(backup1raw)
backup1raw
tail(backup1raw, 10)
tail(backup1raw, 20)
backup1raw <- read.csv("Copy/bbs-analytics-supplements/file_system_testing/tests/xfs_trial1/vmware/backup_1_raw.csv", header = TRUE, sep = ",", skip = 5, stringsAsFactors=FALSE)
> str(backup1raw)
str(backup1raw)
collabels <- c("epoch", "total.usr.cpu", "total.sys.cpu", "total.idl.cpu", "total.wait.cpu", "total.hiq.cpu", "total.siq.cpu", "disk.total.read", "disk.total.write", "memory.used", "memory.buff", "memory.cache", "memory.free", "net.total.received", "net.total.send")
backup1raw <- as.data.table(read.csv("Copy/bbs-analytics-supplements/file_system_testing/tests/xfs_trial1/vmware/backup_1_raw.csv", header = TRUE, sep = ",", skip = 6, stringsAsFactors=FALSE))
backup1raw
colnames(backup1raw) <- collabels
backup1raw
collabels <- c("epoch.time", "total.usr.cpu", "total.sys.cpu", "total.idl.cpu", "total.wait.cpu", "total.hiq.cpu", "total.siq.cpu", "disk.total.read", "disk.total.write", "memory.used", "memory.buff", "memory.cache", "memory.free", "net.total.received", "net.total.send")
colnames(backup1raw) <- collabels
backup1raw
collabels <- c("epoch.time", "total.usr.cpu", "total.sys.cpu", "total.idl.cpu", "total.wait.cpu", "total.hiq.cpu", "total.siq.cpu", "disk.total.read", "disk.total.write", "memory.used", "memory.buff", "memory.cache", "memory.free", "net.total.receive", "net.total.send")
colnames(backup1raw) <- collabels
backup1raw
na.fail(backup1raw)
backup1raw[disk.total.read != 0]
nrow(backup1raw)
backup1raw[net.total.send == 0]
tail(backup1raw[net.total.send == 0], 20)
backup1raw[net.total.send == 0]
backup1raw[disk.total.write == 0]
backup1raw
backup1raw[total.siq.cpu != 0]
uscommunities <- read.csv("Getting and Cleaning Data/Quiz4/getdata-data-ss06hid (1).csv", header = TRUE, stringsAsFactors = FALSE)
uscommunities
str(uscommunities)
names(uscommunities)
strsplit(names(uscommunities), "wgtp")
strsplit(names(uscommunities), "wgtp")[[123]]
strsplit(names(uscommunities), "wgtp")[123]
rm(uscommunities)
gdpdata <- read.csv("Getting and Cleaning Data/Quiz4/getdata-data-GDP.csv", stringsAsFactors = FALSE, header=TRUE)
gdpdata
gdpdata <- read.csv("Getting and Cleaning Data/Quiz4/getdata-data-GDP.csv", stringsAsFactors = FALSE, header=TRUE, skip = 4)
gdpdata
gdpdata <- read.csv("Getting and Cleaning Data/Quiz4/getdata-data-GDP.csv", stringsAsFactors = FALSE, header=TRUE, skip = 4, nrows = 190)
gdpdata
gsub(",", "", gdpdata$X.4)
gsub("\,", "", gdpdata$X.4)
gsub(",", "", gdpdata$X.4)
gdpdata$X.4
str(gdpdata)
as.numeric(gsub(",", "", gdpdata$X.4))
as.numeric(gsub(",", "", gdpdata$X.4))-> gdpdata$X.4
gdpdata$X.4
mean(gdpdata$X.4)
gdpdata
str(gdpdata)
names(gdpdata$X.3)
names(gdpdata$X.3) <- "countryNames"
names(gdpdata$X.3)
colnames(gdpdata$X.3) <- "countryNames"
names(gdpdata$X.3)
str(gdpdata)
names(gdpdata) <- c("countrycode", "rank", "logic", "countryNames", "gdp", "", "", "", "", "")
str(gdpdata)
names(gdpdata) <- c("countrycode", "rank", "logic", "countryNames", "gdp")
str(gdpdata)
names(gdpdata)
names(gdpdata)[4] <- "countrynames"
names(gdpdata)
str(gdpdata)
names(gdpdata)[4] <- "countryNames"
str(gdpdata)
grep("^United", gdpdata$countryNames)
countryNames <- gdpdata$countryNames
countryNames
grep("^United", countryNames)
grep("United$", countryNames)
grep("*United", countryNames)
rm(gdpdata)
gdpdata <- read.csv("Getting and Cleaning Data//Quiz4//getdata-data-GDP.csv", header=TRUE, stringsAsFactors = FALSE, skip=4, nrows=190)
str(gdpdata)
names(gdpdata)[1] <- "countrycode"
names(gdpdata)[2] <- "rank"
names(gdpdata)[4] <- "countryname"
names(gdpdata)[5] <- "gdp"
gdpdata$gdp <- as.numeric(gsub(",", "", gdpdata$gdp))
gdpdata$gdp
str(gdpdata)
edudata <- read.csv("Getting and Cleaning Data//Quiz4//getdata-data-EDSTATS_Country.csv", header=TRUE, stringsAsFactors=F)
str(edudata)
names(gdpdata)[1] <- "CountryCode"
gdpdata <- as.data.table(gdpdata)
edudata <- as.data.table(edudata)
gdpdata
edudata
?merge
setkey(gdpdata, "CountryCode")
setkey(edudata, "CountryCode")
merge(gdpdata, edudata)
merge(gdpdata, edudata) -> merged
merged[, Special.Notes]
grep("June", merged[, Special.Notes])
length(grep("June", merged[, Special.Notes]))
merged[grep("June", merged[, Special.Notes])]
length(grep("Fiscal year end: June", merged[, Special.Notes]))
install.packages("quantmod")
rm(edudata, gdpdata)
rm(merged)
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
amzn
sampleTimes = index(amzn)
sampleTimes
amzn
str(amzn)
grep("2012", sampleTimes)
length(grep("2012", sampleTimes))
sampleTimes
weekdays(sampleTimes)
grep("2012", sampleTimes)
sampleTimes[grep("2012", sampleTimes)]
weekdays(sampleTimes[grep("2012", sampleTimes)])
length(grep("Monday", weekdays(sampleTimes[grep("2012", sampleTimes)])))
rm(sampleTimes)
?par
strptime("May 28 15:18:39 2014", format="%B %d $H:$M:$S %Y", tz="EST")
strptime("May 28 15:18:39 2014", format="%B %d %H:%M:%S %Y", tz="EST")
as.numeric(strptime("May 28 15:18:39 2014", format="%B %d %H:%M:%S %Y", tz="EST"))
as.POSIXct(strptime("May 28 15:18:39 2014", format="%B %d %H:%M:%S %Y", tz="EST"))
as.numeric(as.POSIXct(strptime("May 28 15:18:39 2014", format="%B %d %H:%M:%S %Y", tz="EST")))
as.numeric(strptime("May 29 01:59:25 2014", format="%B %d %H:%M:%S %Y", tz="EST"))
as.numeric(strptime("May 29 01:59:25 2014", format="%B %d %H:%M:%S %Y", tz="EST")) - as.numeric(strptime("May 28 15:18:39 2014", format="%B %d %H:%M:%S %Y", tz="EST"))
as.numeric(strptime("May 29 01:59:25 2014", format="%B %d %H:%M:%S %Y", tz="EST")) - as.numeric(strptime("May 28 15:18:39 2014", format="%B %d %H:%M:%S %Y", tz="EST")) -> diff
?time
diff / (60*60)
(diff / (60*60) - 10 )*60
diff / (60*60) -> diff_time
diff_time
2931315179520/1024
2931315179520/1024^2
2931315179520/1024^4
2931315179520/1024^4 -> jobsize
jobsize/diff_time
diff
jobsize/dif
jobsize/diff
jobsize/diff_time
2931315179520/diff
jobsize*1024/diff
diff
totalsize <- 2931315179520
diff
update.packages(checkBuilt=TRUE)
version
packageStatus()
require(data.table)
?glm
logitdata <- fread("Desktop/logit convert-1.csv", header = TRUE)
logitdata
str(logitdata)
glm(get("1 if convert") ~ get("Total hours") + get("# of weeks used"), data = logitdata, family = binomial("logit"))
glm("1 if convert" ~ "Total hours" + "# of weeks used", data = logitdata, family = binomial("logit"))
setnames(logitdata, c("total.hours", "user.id", "weeks.used", "subscription.purchased", "spam.firewall", "waf"))
str(logitdata)
glm(subscription.purchased ~ total.hours + weeks.used, data=logitdata, family=binomial)
glm(subscription.purchased ~ total.hours + weeks.used, data=logitdata, family=binomial("logit"))
str(glm(subscription.purchased ~ total.hours + weeks.used, data=logitdata, family=binomial("logit")))
glm(subscription.purchased ~ total.hours + weeks.used, data=logitdata, family=binomial("logit"))$coefficients
glm(subscription.purchased ~ total.hours + weeks.used, data=logitdata, family=binomial("logit"))
str(logitdata)
glm(subscription.purchased ~ total.hours + weeks.used, data=logitdata, family=binomial("logit"))
fit1 <- glm(subscription.purchased ~ total.hours, data = logitdata, family = binomial())
fit1 <- glm(subscription.purchased ~ weeks.used, data = logitdata, family = binomial())
fit1 <- glm(subscription.purchased ~ total.hours, data = logitdata, family = binomial())
fit2 <- glm(subscription.purchased ~ weeks.used, data = logitdata, family = binomial())
fit1
fit2
anova(fit1, fit2, test="Chisq")
?anova
glm(subscription.purchased ~ total.hours + weeks.used, data=logitdata, family=binomial("logit")) -> logitfit
anova(logitfit, test="Chisq")
fit1 <- glm(subscription.purchased ~ total.hours, data = logitdata, family = binomial())
fit1
fit1$coefficients
str(logitdata)
?readRDS()
setwd("~/Exploratory Data Analysis/Project 2/")
nei <- readRDS("exdata-data-NEI_data/summarySCC_PM25.rds")
scc <- readRDS("exdata-data-NEI_data/Source_Classification_Code.rds")
str(nei)
nei <- data.table(nei)
library(data.table)
nei <- as.data.table(nei)
scc <- as.data.table(scc)
scc
str(scc)
str(nei)
nei[, unique(year)]
nei[, list(total_emissions = sum(Emissions)), by = year]
p1data <- nei[, list(total_emissions = sum(Emissions)), by = year]
plot(x= p1data[, year], y = p1data[, total_emissions], type="l")
plot(x= p1data[, year], y = p1data[, total_emissions], type="l", xlab = "Total Emissions", ylab = "Year", main = "Total US PM2.5 Emissions")
plot(x= p1data[, year], y = p1data[, total_emissions], type="l", ylab = "Total Emissions", xlab = "Year", main = "Total US PM2.5 Emissions")
plot(x= p1data[, year], y = p1data[, total_emissions], type="l", ylab = "Total Emissions (tons)", xlab = "Year", main = "Total US PM2.5 Emissions")
source('~/Exploratory Data Analysis/Project 2/plot1.R')
plot1()
p2data <- nei[fips == "24510", list(total_emissions = sum(Emissions)), by = year]
plot(x= p2data[, year], y = p2data[, total_emissions], type="l", ylab = "Total Emissions (tons)", xlab = "Year", main = "Total PM2.5 Emissions in Baltimore City, MD")
p2data[, unique(fips)]
nei[fips == "24510", list(total_emissions = sum(Emissions), fips), by = year]
nei[fips == "24510", list(total_emissions = sum(Emissions), fips), by = year][, unique(fips)]
nei[fips == "24510", list(total_emissions = sum(Emissions)), by = year]
source('~/Exploratory Data Analysis/Project 2/plot2.R')
plot2()
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?qplot
p3data <- nei[fips = "24510", list(total_emissions = sum(Emissions)), by = c("year", "type")]
p3data <- nei[fips == "24510", list(total_emissions = sum(Emissions)), by = c("year", "type")]
p3data
qplot(year, total_emissions, color = type, data = p3data, geom = "point")
qplot(year, total_emissions, color = type, data = p3data, geom = "line")
qplot(year, total_emissions, color = type, data = p3data, geom = "line", xlab = "Year", ylab = "Total Emissions (tons)", main = "Total PM2.5 Emissions by Type in Baltimore City")
detach("package:ggplot2", unload=TRUE)
source('~/Exploratory Data Analysis/Project 2/plot3.R')
plot3()
str(scc)
scc[, unique(Data.Category)]
grep("coal", scc)
?grep
scc[Option.Group %like% "coal"]
scc[Option.set %like% "coal"]
scc[Option.Set %like% "coal"]
scc[SCC.Level.One %like% "coal"]
scc[SCC.Level.Two %like% "coal"]
scc[SCC.Level.Three %like% "coal"]
str(scc)
scc[SCC.Level.Four %like% "coal"]
scc[Map.To %like% "coal"]
scc[Last.Inventory.Year %like% "coal"]
scc[Usage.Notes %like% "coal"]
scc[Usage.Notes %like% "oal"]
scc[Data.Category %like% "oal"]
scc[Short.Name %like% "oal"]
scc[Short.Name %like% "[cC]oal"]
str(nei)
str(scc)
scc[, unique(SCC.Level.One)]
scc[, unique(SCC.Level.Two)]
scc[, unique(SCC.Level.One)]
levelone <- c("Internal Combustion Engines", "Mobile Sources")
scc[, unique(SCC.Level.Two)]
leveltwo <- c("Engine Testing", "Highway Vehicles - Gasoline", "Highway Vehicles - Diesel", "Off-highway Vehicle Gasoline, 2-Stroke", "Off-highway Vehicle Gasoline, 4-Stroke", "Off-highway Vehicle Diesel", "Off-highway 2-stroke Gasoline Engines", "Off-highway 4-stroke Gasoline Engines", "Off-highway Diesel Engines", "Off-highway LPG-fueled Engines")
scc[, unique(SCC.Level.Three)]
scc[SCC.Level.Three %like% "Vehicle", unique(SCC.Level.Three)]
scc[SCC.Level.Three %like% c("Vehicle", "Hydrazine"), unique(SCC.Level.Three)]
scc[SCC.Level.Three %like% "Vehicle|Hydrazine", unique(SCC.Level.Three)]
scc[SCC.Level.Three %like% "Vehicle|Motor", unique(SCC.Level.Three)]
scc[SCC.Level.Three %like% "Vehicle|Motor|Engine", unique(SCC.Level.Three)]
leveltw
leveltw
leveltwo
levelthree <- scc[SCC.Level.Three %like% "Vehicle|Motor", unique(SCC.Level.Three)]
str(scc)
scc[SCC.Level.Four %like% "Vehicle|Motor|Engine", unique(SCC.Level.Four)]
levelfour  <- scc[SCC.Level.Four %like% "Vehicle|Motor", unique(SCC.Level.Four)]
str(scc)
scc[, unique(Option.Group)]
levelone
scc[SCC.Level.Two, unique(SCC.Level.Two)]
scc[SCC.Level.Two %like% "Motor|Vehicle|Engine", unique(SCC.Level.Two)]
leveltwo
str(nei)
str(scc)
merge(scc, nei, by = "SCC")
bc <- merge(scc, nei[fips == "24510"], by = "SCC")
bc
bc[SCC.Level.One %in% levelone | SCC.Level.Two %in% leveltwo | SCC.Level.Three %in% levelthree | SCC.Level.Four %in% levelfour]
bc[SCC.Level.One %in% levelone | SCC.Level.Two %in% leveltwo | SCC.Level.Three %in% levelthree | SCC.Level.Four %in% levelfour, sum(Emissions), by = year]
p5data <- bc[SCC.Level.One %in% levelone | SCC.Level.Two %in% leveltwo | SCC.Level.Three %in% levelthree | SCC.Level.Four %in% levelfour, sum(Emissions), by = year]
p5data <- bc[SCC.Level.One %in% levelone | SCC.Level.Two %in% leveltwo | SCC.Level.Three %in% levelthree | SCC.Level.Four %in% levelfour, list(total_emissions = sum(Emissions)), by = year]
p5data
plot(x= p5data[, year], y = p5data[, total_emissions], type="l", ylab = "Total Emissions (tons)", xlab = "Year", main = "Motor Vehicle PM2.5 Emissions in Baltimore City")
p5data <- bc[SCC.Level.One %in% levelone | SCC.Level.Two %in% leveltwo | SCC.Level.Three %in% levelthree | SCC.Level.Four %in% levelfour, list(total_emissions = sum(Emissions)), keyby = year]
p5data
plot(x= p5data[, year], y = p5data[, total_emissions], type="l", ylab = "Total Emissions (tons)", xlab = "Year", main = "Motor Vehicle PM2.5 Emissions in Baltimore City")
source('~/Exploratory Data Analysis/Project 2/plot5.R')
rm(p5data)
plot5()
bcla <- merge(scc, nei[fips %in% c("24510", "06037")], by = "SCC")
bcla
bc
p6data <- bc[SCC.Level.One %in% levelone | SCC.Level.Two %in% leveltwo | SCC.Level.Three %in% levelthree | SCC.Level.Four %in% levelfour, list(total_emissions = sum(Emissions)), keyby = c("year", "fips")]
p6data
p6data <- bcla[SCC.Level.One %in% levelone | SCC.Level.Two %in% leveltwo | SCC.Level.Three %in% levelthree | SCC.Level.Four %in% levelfour, list(total_emissions = sum(Emissions)), keyby = c("year", "fips")]
p6data
p6data[, factor(fips)]
p6data[, factor(fips, labels = c("Los Angeles", "Baltimore"))]
p6data
p6data[, county := factor(fips, labels = c("Los Angeles", "Baltimore"))]
p6data
qplot(year, total_emissions, color = county, data = p6data, geom = "line", xlab = "Year", ylab = "Total Emissions (tons)", main = "Motor Vehicle PM2.5 Emissions in Baltimore City and LA")
rm(p6data, bcla, bc)
source('~/Exploratory Data Analysis/Project 2/plot6.R')
plot6()
source('~/Exploratory Data Analysis/Project 2/plot6.R')
plot6()
source('~/Exploratory Data Analysis/Project 2/plot6.R')
plot6()
source('~/Exploratory Data Analysis/Project 2/plot6.R')
plot6()
levelone <- scc[SCC.Level.One %like% "[cC]oal|[cC]ombustion", unique(SCC.Level.One)]
levelone
levelone <- scc[SCC.Level.One %like% "[cC]oal", unique(SCC.Level.One)]
levelone
leveltwo <- scc[SCC.Level.Two %like% "[cC]oal", unique(SCC.Level.Two)]
leveltwo
scc[SCC.Level.Two %like% "Coal"]
levelthree <- scc[SCC.Level.Three %like% "[cC]oal", unique(SCC.Level.Three)]
levelthree
levelfour <- scc[SCC.Level.Four %like% "[cC]oal", unique(SCC.Level.Four)]
levelfour
source('~/Exploratory Data Analysis/Project 2/plot4.R')
plot4()
tables()
rm(nei, scc, p1data, p2data, p3data)
tables()
source('~/Exploratory Data Analysis/Project 2/plot1.R')
source('~/Exploratory Data Analysis/Project 2/plot6.R')
